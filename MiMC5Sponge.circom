pragma circom 2.0.0;

template MiMC5Feistel() {
    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var nRounds = 20;
    var c[20] = [
        0,
        49219114343585981898778096947129182846024719379257272157141511694726783481964,
        47855517973747953359559406700667652290876686311952536362670929090580773907270,
        76588913909330395561756323144671035208169423888615518225461386088147125972314,
        12525104901043143470506634107952223407518345577197498883275549468854508180170,
        76519784831177603089639880245531998983245788205676993141540854926005773819164,
        66425668176422190541304926984956359726991567488263498121962759124069482870677,
        53282012685813033725419215682127152019134494475815695518438853196633163465277,
        61107998933399807761204890144093858753555047298035471314635120218469293921362,
        70447960517294505288890977831273029666135345367163990283053927611800852931246,
        75169288172112319317644660908528754138125079704340795081844784125376247703618,
        45977936704504398448050092837996673896652460873843043041301681549333603706709,
        34217603226756731500043165092493895865442736695663038117133434293989309083729,
        35811318106613870544629375283720544087679464407639981915222038953564041553792,
        43078851087590693447446653340432655174890149231884620165514004363545043539267,
        17236329831298989445628916590693415040809718293777784166762731132782868989400,
        6781209844455979234676460551453372253835505515335847406716774525897502087592,
        50532701486008056885191741852829785340134458948206445580566514948653287171448,
        29067895547576131516819585932066672159914349571876908150556853837220981545245,
        49634159060605464999323280523077320973832169565705812422238809594321078862485
    ];

    signal lastOutputL[nRounds + 1];
    signal lastOutputR[nRounds + 1];

    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutputL[0] <== iL;
    lastOutputR[0] <== iR;

    for(var i = 0; i < nRounds; i++) {
        base[i] = lastOutputR[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutputR[i + 1] <== lastOutputL[i] + base4[i] * base[i];
        lastOutputL[i + 1] <== lastOutputR[i];
    }

    oL <== lastOutputL[nRounds];
    oR <== lastOutputR[nRounds];

}


template MiMC5Sponge(nInputs) {
    signal input k;
    signal input ins[nInputs];
    signal output o;

    signal lastR[nInputs + 1];
    signal lastC[nInputs + 1];

    lastR[0] <== 0;
    lastC[0] <== 0;

    component layers[nInputs];

    for(var i = 0; i < nInputs; i++) {
        layers[i] = MiMC5Feistel();
        
        layers[i].iL <== lastR[i] + ins[i];
        layers[i].iR <== lastC[i];
        layers[i].k <== k;

        lastR[i + 1] <== layers[i].oL;
        lastC[i + 1] <== layers[i].oR;
    }
    o <== lastR[nInputs];
}

component main = MiMC5Sponge(2);