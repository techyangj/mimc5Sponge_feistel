// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

contract Hasher{
    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256[20] c = [
        0,
        49219114343585981898778096947129182846024719379257272157141511694726783481964,
        47855517973747953359559406700667652290876686311952536362670929090580773907270,
        76588913909330395561756323144671035208169423888615518225461386088147125972314,
        12525104901043143470506634107952223407518345577197498883275549468854508180170,
        76519784831177603089639880245531998983245788205676993141540854926005773819164,
        66425668176422190541304926984956359726991567488263498121962759124069482870677,
        53282012685813033725419215682127152019134494475815695518438853196633163465277,
        61107998933399807761204890144093858753555047298035471314635120218469293921362,
        70447960517294505288890977831273029666135345367163990283053927611800852931246,
        75169288172112319317644660908528754138125079704340795081844784125376247703618,
        45977936704504398448050092837996673896652460873843043041301681549333603706709,
        34217603226756731500043165092493895865442736695663038117133434293989309083729,
        35811318106613870544629375283720544087679464407639981915222038953564041553792,
        43078851087590693447446653340432655174890149231884620165514004363545043539267,
        17236329831298989445628916590693415040809718293777784166762731132782868989400,
        6781209844455979234676460551453372253835505515335847406716774525897502087592,
        50532701486008056885191741852829785340134458948206445580566514948653287171448,
        29067895547576131516819585932066672159914349571876908150556853837220981545245,
        49634159060605464999323280523077320973832169565705812422238809594321078862485
    ];

    function MiMC5Feistel(uint256 _iL, uint256 _iR, uint256 _k) internal view returns(uint256 oL, uint256 oR) {
        uint8 nRounds = 20;

        uint256 lastL = _iL;
        uint256 lastR = _iR;

        uint256 mask;
        uint256 mask2;
        uint256 mask4;
        uint256 temp;

        for(uint8 i = 0; i < nRounds; i++) {
            mask = addmod(lastR, _k, p);
            mask = addmod(mask, c[i], p);
            mask2 = mulmod(mask, mask, p);
            mask4 = mulmod(mask2, mask2, p);
            mask = mulmod(mask4, mask, p);

            temp = lastR;
            lastR = addmod(lastL, mask, p);
            lastL = temp;
        }
        return (lastL, lastR);
    }

    function MiMc5Sponage(uint256[2] memory _ins, uint256 _k) external view returns(uint256 h) {
        uint256 lastR = 0;
        uint256 lastC = 0;

        for(uint8 i = 0; i < _ins.length; i++) {
            lastR = addmod(lastR, _ins[i], p);
            (lastR, lastC) = MiMC5Feistel(lastR, lastC, _k);
        }
        h = lastR;
    }

}